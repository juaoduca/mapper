name: Publish Chat Snapshot (with contents)

on:
  push:
    branches: [ "main" ]  # change if your default branch differs

permissions:
  contents: write

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Build snapshot.json
        env:
          MAX_FILE_KB: "256"   # inline only text files <= 256KB
        run: |
          set -euo pipefail
          # Capture metadata for this commit into env
          echo "DATE=$(date -u +%FT%TZ)" >> "$GITHUB_ENV"
          echo "REPO=$GITHUB_REPOSITORY" >> "$GITHUB_ENV"
          echo "BRANCH=$GITHUB_REF_NAME" >> "$GITHUB_ENV"
          echo "SHA=$GITHUB_SHA" >> "$GITHUB_ENV"

          # List files at HEAD with size
          git ls-tree -r -l --full-tree HEAD > tree.txt

          python3 - <<'PY'
import base64, json, os, re

def is_binary(data: bytes) -> bool:
    return b"\x00" in data

max_file_bytes = int(os.environ.get("MAX_FILE_KB","256")) * 1024
repo   = os.environ["REPO"]
branch = os.environ["BRANCH"]
sha    = os.environ["SHA"]
date   = os.environ["DATE"]

def raw_url(path: str) -> str:
    return f"https://raw.githubusercontent.com/{repo}/{sha}/{path}"

files = []
with open("tree.txt","r",encoding="utf-8") as f:
    for line in f:
        # format: <mode> <type> <sha> <size>\t<path>
        m = re.match(r"(\d+)\s+\w+\s+([0-9a-f]{40})\s+(\d+)\t(.+)$", line.strip())
        if not m:
            m2 = re.match(r"(\d+)\s+\w+\s+([0-9a-f]{40})\s+-\t(.+)$", line.strip())
            if not m2:
                continue
            mode, objsha, size_int, path = m2.group(1), m2.group(2), None, m2.group(3)
        else:
            mode, objsha, size, path = m.groups()
            size_int = int(size)

        entry = {
            "path": path,
            "mode": mode,
            "sha": objsha,
            "size": size_int,
            "raw_url": raw_url(path),
        }

        try:
            with open(path, "rb") as fp:
                data = fp.read()
            if size_int is not None and size_int <= max_file_bytes and not is_binary(data):
                entry["encoding"] = "base64"
                entry["content_b64"] = base64.b64encode(data).decode("ascii")
            else:
                entry["encoding"] = "none"
        except Exception:
            entry["encoding"] = "none"

        files.append(entry)

snap = { "sha": sha, "branch": branch, "date": date, "files": files }
with open("snapshot.json","w",encoding="utf-8") as out:
    json.dump(snap, out, ensure_ascii=False, separators=(",",":"))
PY

          # Stage site files
          mkdir -p public/chat/"$SHA"
          cp snapshot.json public/chat/"$SHA"/snapshot.json
          printf '{"latest":"%s"}\n' "$SHA" > public/chat/latest.json

      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: public
          keep_files: true
          enable_jekyll: false
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
