name: Publish Chat Snapshot (with contents)

on:
  push:
    branches: [ "main" ]   # change if your default branch differs

permissions:
  contents: write

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Write builder script
        shell: bash
        run: |
          cat > build_snapshot.py <<'PY'
import base64, json, os, re, subprocess
from datetime import datetime, timezone

repo   = os.environ.get("GITHUB_REPOSITORY","")
branch = os.environ.get("GITHUB_REF_NAME","")
sha    = os.environ.get("GITHUB_SHA","")
date   = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
max_file_bytes = int(os.environ.get("MAX_FILE_KB","256")) * 1024

def raw_url(path: str) -> str:
    return f"https://raw.githubusercontent.com/{repo}/{sha}/{path}"

def is_binary(b: bytes) -> bool:
    return b"\x00" in b

tree = subprocess.check_output(
    ["git","ls-tree","-r","-l","--full-tree","HEAD"],
    text=True, errors="ignore"
)

files = []
for line in tree.splitlines():
    m = re.match(r"(\\d+)\\s+\\w+\\s+([0-9a-f]{40})\\s+(\\d+)\\t(.+)$", line)
    if not m:
        m2 = re.match(r"(\\d+)\\s+\\w+\\s+([0-9a-f]{40})\\s+-\\t(.+)$", line)
        if not m2:
            continue
        mode, objsha, path = m2.group(1), m2.group(2), m2.group(3)
        size_int = None
    else:
        mode, objsha, size, path = m.groups()
        size_int = int(size)

    entry = {
        "path": path,
        "mode": mode,
        "sha": objsha,
        "size": size_int,
        "raw_url": raw_url(path),
    }

    try:
        with open(path, "rb") as fp:
            data = fp.read()
        if size_int is not None and size_int <= max_file_bytes and not is_binary(data):
            entry["encoding"] = "base64"
            entry["content_b64"] = base64.b64encode(data).decode("ascii")
        else:
            entry["encoding"] = "none"
    except Exception:
        entry["encoding"] = "none"

    files.append(entry)

snap = {"sha": sha, "branch": branch, "date": date, "files": files}
with open("snapshot.json","w",encoding="utf-8") as out:
    json.dump(snap, out, ensure_ascii=False, separators=(",",":"))
PY

      - name: Build snapshot and stage site
        shell: bash
        env:
          MAX_FILE_KB: "256"   # inline only text files <= 256KB
        run: |
          python3 build_snapshot.py
          mkdir -p public/chat/"$GITHUB_SHA"
          cp snapshot.json public/chat/"$GITHUB_SHA"/snapshot.json
          printf '{"latest":"%s"}\n' "$GITHUB_SHA" > public/chat/latest.json

      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: public
          keep_files: true
          enable_jekyll: false
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
